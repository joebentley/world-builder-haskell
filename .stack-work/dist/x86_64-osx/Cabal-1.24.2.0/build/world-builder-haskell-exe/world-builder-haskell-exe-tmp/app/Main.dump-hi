
==================== FINAL INTERFACE ====================
2017-11-07 08:29:26.680961 UTC

interface main@main:Main 8002
  interface hash: 644233950932649e22bf41bfc2a62f3d
  ABI hash: 008299625c3ab4c4228bccc1862e971f
  export-list hash: accd220593d0b204ba7b3c2f8d108b02
  orphan hash: a4fd397c559eabebc071a75d04735511
  flag hash: fdb35b436d578bf3b48ed786912429ea
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.test1
  Main.test2
  Main.testRoom
  Main.testRoom2
  Main.testState
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      world-builder-haskell-0.1.0.0@world-builder-haskell-0.1.0.0-KjZXUPfQvPa5KF56vbnWWK
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  world-builder-haskell-0.1.0.0@world-builder-haskell-0.1.0.0-KjZXUPfQvPa5KF56vbnWWK:Interface 07c3d8eea4ee3ae1288d0a5d5fbbf771
import  -/  world-builder-haskell-0.1.0.0@world-builder-haskell-0.1.0.0-KjZXUPfQvPa5KF56vbnWWK:World 445bc605052d04934c771ec938ad275a
c19a1e9d16e0364e7f4c6fd88ad2199f
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Char], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Main.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } }) -}
f8173b880a42bc316f55b0367207e09c
  $sfromList1 ::
    Data.Map.Base.Map [GHC.Types.Char] a1
    -> [([GHC.Types.Char], a1)]
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
954d0cf9c23239f495b861eb90295c45
  $sinsert_$sgo10 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4873fd2bdc9f74c294bff4ad2dd3c7be
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
ee0b71f98a472abebc0e2b567d38ce1f
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2bdc4fde74fa602a0a103d614f6d8b05
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Interface.loop1 Main.testState s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
a2361a508eb98b780b15e655f384f609
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7666dff7052b3fa37e7b0f10ca4b7990
  test1 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.test4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
66108ad354fc1eeed8fd5bde0af1226d
  test2 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.test6 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7f2607ad2d882c47fcc64f1bdfb1f93f
  test4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Interface.parse1
                        Main.testState
                        Main.test5
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case ipv1 of wild { Interface.State ds2 ds3 ->
                    case ds3 of ww { World.World ww1 -> World.$w$cshow ww1 } })
                   GHC.Types.True
                   ipv }) -}
4831d2a39b738c829e42be704eab46fd
  test5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "@create room Jail Cell Abode"#) -}
036ee370ee82be30ed5b4565e2f50dc9
  test6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Interface.parse1
                        Main.testState
                        Main.test5
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Interface.parse1
                        ipv1
                        Main.test7
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case ipv3 of wild { Interface.State ds3 ds4 ->
                    case ds4 of ww { World.World ww1 -> World.$w$cshow ww1 } })
                   GHC.Types.True
                   ipv2 } }) -}
2e0fda8dde38a3fe487015a37e1f3526
  test7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "@set room 1 desc This is a horrid room"#) -}
72c874282b5479c631b590ce60d0bd98
  testRoom :: World.Room
  {- Strictness: m,
     Unfolding: (World.Room
                   Main.testRoom13
                   Main.testRoom12
                   Main.testRoom7
                   Main.testRoom1) -}
c7e61a6591839a3de41c661f5161dc2a
  testRoom1 :: Data.Map.Base.Map [GHC.Types.Char] World.Index
  {- Unfolding: (Main.$sfromList @ GHC.Types.Int Main.testRoom3) -}
bdbae7083fd9e6848176a50cc71902da
  testRoom10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Horrible jail cell"#) -}
4beed810d4df4f8f55d2c830c85f273b
  testRoom11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "desc"#) -}
b68f5bd9de89256b53ab924484390d65
  testRoom12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Jail Cell"#) -}
9b94c141617c5190b0d627440eb92a3e
  testRoom13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
69ac45cc0416cc4fdf4233e17178328c
  testRoom14 :: Data.Map.Base.Map [GHC.Types.Char] World.Index
  {- Unfolding: (Main.$sfromList @ GHC.Types.Int Main.testRoom15) -}
debca1aca67b3a527cd85625ea8d79ae
  testRoom15 :: [([GHC.Types.Char], World.Index)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], World.Index)
                   Main.testRoom16
                   (GHC.Types.[] @ ([GHC.Types.Char], World.Index))) -}
23582d75c18cafe804aad321932ba6ca
  testRoom16 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((Main.testRoom17, Main.testRoom13)) -}
78cace0d7aaf406a822caf2557b50aec
  testRoom17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s"#) -}
0aa6bd0a252f6782fdde014ef234737f
  testRoom18 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Types.Char]
  {- Unfolding: (Main.$sfromList
                   @ [GHC.Types.Char]
                   Main.testRoom19) -}
5eb93f4df47ba13b28560ed9bb051e1a
  testRoom19 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Main.testRoom20
                   (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Types.Char]))) -}
bae3ea28a7fd019090673fd94ddd8c7f
  testRoom2 :: World.Room
  {- Strictness: m,
     Unfolding: (World.Room
                   Main.testRoom5
                   Main.testRoom22
                   Main.testRoom18
                   Main.testRoom14) -}
dead0f18647dd6a6830a72b65d615f26
  testRoom20 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Main.testRoom11, Main.testRoom21)) -}
a8548b3c368cdaf90b01adc4eeb97da7
  testRoom21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Dark corridor"#) -}
86a53e70db18c1cc4e7e7137bcdec498
  testRoom22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Corridor"#) -}
87f09df6ab156a5f162a8f65ca2c203f
  testRoom3 :: [([GHC.Types.Char], World.Index)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], World.Index)
                   Main.testRoom4
                   (GHC.Types.[] @ ([GHC.Types.Char], World.Index))) -}
9f00017786934a0e6c840f10b38d38ec
  testRoom4 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((Main.testRoom6, Main.testRoom5)) -}
e8c49d1d9e8299ff229653591a9ad502
  testRoom5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
bf195eff93762d9e9e9c4a3b8831646b
  testRoom6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "n"#) -}
985bbf5d523d915c688fea050e7587e4
  testRoom7 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Types.Char]
  {- Unfolding: (Main.$sfromList
                   @ [GHC.Types.Char]
                   Main.testRoom8) -}
e036a0db652c4741c1cda4f60e2e2ca2
  testRoom8 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Main.testRoom9
                   (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Types.Char]))) -}
d4a51a8967866db23da5564430752b3c
  testRoom9 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Main.testRoom11, Main.testRoom10)) -}
0e234a0cfa67e478282ae0891537b227
  testState :: Interface.State
  {- Strictness: m,
     Unfolding: (Interface.State
                   Interface.emptyState1
                   Main.testState1) -}
43af47f7d6250fb78e3e9cb7907b8818
  testState1 :: World.World
  {- Unfolding: (case World.$waddRoom
                        Main.testRoom2
                        Main.testState_ww3 of ww2 { Unit# ww3 ->
                 World.World ww3 }) -}
c0eee5ea562f7096b4c10f6d55cd0c16
  testState_ww3 :: Data.Map.Base.Map World.Index World.Room
  {- Unfolding: (case World.$witerateUntilNoKey
                        @ World.Room
                        0#
                        (Data.Map.Base.Tip @ World.Index @ World.Room) of ww1 { DEFAULT ->
                 World.$w$sgo1
                   @ World.Room
                   ww1
                   Main.testRoom
                   (Data.Map.Base.Tip @ World.Index @ World.Room) }) -}
"SPEC/Main fromList @ [Char] _" [ALWAYS] forall @ a
                                                ($dOrd :: GHC.Classes.Ord [GHC.Types.Char])
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

