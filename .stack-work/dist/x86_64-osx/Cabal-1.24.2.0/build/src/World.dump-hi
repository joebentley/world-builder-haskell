
==================== FINAL INTERFACE ====================
2017-11-07 08:29:14.604159 UTC

interface world-builder-haskell-0.1.0.0-KjZXUPfQvPa5KF56vbnWWK:World 8002
  interface hash: 0f5f48e148c773755bdf8ac8c41f5bbd
  ABI hash: 445bc605052d04934c771ec938ad275a
  export-list hash: 28404324800c0b1e5075df388b414d07
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  World.addRoom
  World.changeRoomAttribute
  World.emptyWorld
  World.getFreeKey
  World.getNextRoomID
  World.getRoomAttribute
  World.getRoomByID
  World.iterateUntilNoKey
  World.Index
  World.Room{World.Room attrs exits name roomID}
  World.World{World.World rooms}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8b155a212edaca6c85bcefe65a8bc505
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
67114f18da6b0de4831a8eed1b3aaba4
  $fShowRoom :: GHC.Show.Show World.Room
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Room
                  World.$fShowRoom_$cshowsPrec
                  World.$fShowRoom_$cshow
                  World.$fShowRoom_$cshowList -}
67114f18da6b0de4831a8eed1b3aaba4
  $fShowRoom1 :: World.Room -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: World.Room) ->
                 case w of ww { World.Room ww1 ww2 ww3 ww4 ->
                 World.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 }) -}
3087731c61012264ac8bae45316d040a
  $fShowRoom2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
b922f3370358154ea77680d694005666
  $fShowRoom3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exits = "#) -}
004901280ed6d0f26a7db8c5fe5c527a
  $fShowRoom4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "attrs = "#) -}
6bb682fda62374686975be1a9ae958dc
  $fShowRoom5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name = "#) -}
a1c828a4f5295f886706da8c6f1a7d3a
  $fShowRoom6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
40008ccc151d54d4b2d2b980140baf09
  $fShowRoom7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "roomID = "#) -}
4a762accbdc1bdeff3b844c354478db0
  $fShowRoom8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Room {"#) -}
67114f18da6b0de4831a8eed1b3aaba4
  $fShowRoom_$cshow :: World.Room -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Room) ->
                 World.$fShowRoom_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
67114f18da6b0de4831a8eed1b3aaba4
  $fShowRoom_$cshowList :: [World.Room] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ World.Room World.$fShowRoom1) -}
67114f18da6b0de4831a8eed1b3aaba4
  $fShowRoom_$cshowsPrec ::
    GHC.Types.Int -> World.Room -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: World.Room) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.Room ww3 ww4 ww5 ww6 ->
                 World.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 } }) -}
571d49c072cac2ee9573bbb36813de4d
  $fShowWorld :: GHC.Show.Show World.World
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.World
                  World.$fShowWorld_$cshowsPrec
                  World.$fShowWorld_$cshow
                  World.$fShowWorld_$cshowList -}
571d49c072cac2ee9573bbb36813de4d
  $fShowWorld1 :: World.World -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: World.World) ->
                 case w of ww { World.World ww1 -> World.$w$cshowsPrec1 0# ww1 }) -}
4f5cbeebcc7814abb58c1cdda2eafc67
  $fShowWorld2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rooms = "#) -}
b811514975700d65dbba92c313ed7e88
  $fShowWorld3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "World {"#) -}
56102e04bf5327b707dece2994deeb6c
  $fShowWorld4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   World.$fShowRoom2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
571d49c072cac2ee9573bbb36813de4d
  $fShowWorld_$cshow :: World.World -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: World.World) ->
                 case w of ww { World.World ww1 -> World.$w$cshow ww1 }) -}
571d49c072cac2ee9573bbb36813de4d
  $fShowWorld_$cshowList :: [World.World] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ World.World
                   World.$fShowWorld1) -}
571d49c072cac2ee9573bbb36813de4d
  $fShowWorld_$cshowsPrec ::
    GHC.Types.Int -> World.World -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: World.World) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.World ww3 ->
                 World.$w$cshowsPrec1 ww1 ww3 } }) -}
3520906d3f163d8c5d33f13fa57e3d04
  $sinsert_$sgo10 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
65445ad1b9bdb9d32b59ebef2c29ad3e
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6ca28f843e6a3c36c86a4ec9d541558f
  $slookup3 ::
    World.Index -> Data.Map.Base.Map World.Index a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: World.Index)
                   (w1 :: Data.Map.Base.Map World.Index a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 World.$wpoly_go10 @ a ww1 w1 }) -}
64d67f75222d1a7bf75173dec0922e60
  $tc'Room :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8708025625130079542##
                   15834270540989789456##
                   World.$trModule
                   World.$tc'Room1) -}
7bc2f5f4316b929bf30447d3f1321b48
  $tc'Room1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Room"#) -}
d58ff8c3ae0aab41926713f353b1edfb
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13661536118783360737##
                   6007465439919354651##
                   World.$trModule
                   World.$tc'World1) -}
2ed45c9eec6730f0a8dbb1a192e1f60b
  $tc'World1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'World"#) -}
35825a8cf8f700a40bb3a0cf0f635a86
  $tcRoom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13616097771882002103##
                   4246267768050070044##
                   World.$trModule
                   World.$tcRoom1) -}
098ef745a36c67e9aa363fb2ce0427fc
  $tcRoom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Room"#) -}
469719329931dc377e25ab1d617d7a1b
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7407270883429868533##
                   819929118454317395##
                   World.$trModule
                   World.$trModule1) -}
fcf6bac0f5bafdc4224459e37dd244cb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module World.$trModule2 World.$trModule1) -}
d6467704799b9906f818899fe0b12a9b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "World"#) -}
c3695a31dc70431980db7cbac9cd3499
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "world-builder-haskell-0.1.0.0-KjZXUPfQvPa5KF56vbnWWK"#) -}
6f8a6a8c43786231c5f8b26c5a1f8c61
  $w$cshow ::
    Data.Map.Base.Map World.Index World.Room -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Map.Base.Map World.Index World.Room) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   World.$fShowWorld3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      World.$fShowWorld2
                      (Data.Map.Base.$w$cshowsPrec
                         @ GHC.Types.Int
                         @ World.Room
                         GHC.Show.$fShowInt
                         World.$fShowRoom
                         0#
                         ww
                         World.$fShowWorld4))) -}
27bc29691dc2caab646c95a7999d8f37
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> World.Index
    -> GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String World.Index
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U(U)><L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Index)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Data.Map.Base.Map GHC.Base.String GHC.Base.String)
                   (ww4 :: Data.Map.Base.Map GHC.Base.String World.Index) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ [GHC.Types.Char]
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       GHC.Show.$fShow[]_$s$fShow[]1
                       0#
                       ww3
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ [GHC.Types.Char]
                       @ GHC.Types.Int
                       GHC.Show.$fShow[]_$s$fShow[]1
                       GHC.Show.$fShowInt
                       0#
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       World.$fShowRoom8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          World.$fShowRoom7
                          (case ww1 of ww5 { GHC.Types.I# ww6 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww6
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     World.$fShowRoom6
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        World.$fShowRoom5
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows6
                                           (GHC.Show.showLitString
                                              ww2
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows6
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    World.$fShowRoom6
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       World.$fShowRoom4
                                                       (f (GHC.Base.++
                                                             @ GHC.Types.Char
                                                             World.$fShowRoom6
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                World.$fShowRoom3
                                                                (f1
                                                                   (GHC.Base.++
                                                                      @ GHC.Types.Char
                                                                      World.$fShowRoom2
                                                                      x)))))))))))) of ww7 { (#,#) ww8 ww9 ->
                           GHC.Types.: @ GHC.Types.Char ww8 ww9 } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
7650197768a0fc01d8aafdfff3d10dfa
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map World.Index World.Room -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Base.Map World.Index World.Room) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ GHC.Types.Int
                       @ World.Room
                       GHC.Show.$fShowInt
                       World.$fShowRoom
                       0#
                       ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       World.$fShowWorld3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          World.$fShowWorld2
                          (f (GHC.Base.++ @ GHC.Types.Char World.$fShowRoom2 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
931addd19bbbca587a0f91649f4fac11
  $w$sgo1 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map World.Index a1
    -> Data.Map.Base.Map World.Index a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
710f14af4837f01c29a5a305017a0d8a
  $w$sgo10 ::
    (World.Index -> a1 -> GHC.Base.Maybe a1)
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map World.Index a1
    -> Data.Map.Base.Map World.Index a1
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Inline: [0] -}
85fba0cec3199e8da638cabf3fdcde6e
  $waddRoom ::
    World.Room
    -> Data.Map.Base.Map World.Index World.Room
    -> (# Data.Map.Base.Map World.Index World.Room #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: World.Room)
                   (ww :: Data.Map.Base.Map World.Index World.Room) ->
                 (# case ww of wild {
                      Data.Map.Base.Bin dt ds1 ds2 ds3 ds4
                      -> case World.$witerateUntilNoKey
                                @ World.Room
                                dt
                                wild of ww1 { DEFAULT ->
                         World.$w$sgo1 @ World.Room ww1 w wild }
                      Data.Map.Base.Tip
                      -> case World.$witerateUntilNoKey
                                @ World.Room
                                0#
                                (Data.Map.Base.Tip @ World.Index @ World.Room) of ww1 { DEFAULT ->
                         World.$w$sgo1
                           @ World.Room
                           ww1
                           w
                           (Data.Map.Base.Tip @ World.Index @ World.Room) } } #)) -}
f27565ddbf621ad826d2b35337aa1a41
  $wchangeRoomAttribute ::
    Data.Map.Base.Map World.Index World.Room
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# Data.Map.Base.Map World.Index World.Room #)
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Map.Base.Map World.Index World.Room)
                   (ww1 :: GHC.Prim.Int#)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String) ->
                 case World.$wpoly_go10 @ World.Room ww1 ww of wild {
                   GHC.Base.Nothing -> (# ww #)
                   GHC.Base.Just x
                   -> (# World.$w$sgo10
                           @ World.Room
                           (\ (k' :: World.Index)[OneShot] (x' :: World.Room)[OneShot] ->
                            GHC.Base.Just
                              @ World.Room
                              (case x of wild1 { World.Room ds ds1 ds2 ds3 ->
                               World.Room
                                 ds
                                 ds1
                                 (World.$sinsert_$sgo10 @ [GHC.Types.Char] w w1 ds2)
                                 ds3 }))
                           ww1
                           ww #) }) -}
eb5f26fa17abc8a76e41b47f23077819
  $witerateUntilNoKey ::
    GHC.Prim.Int# -> Data.Map.Base.Map World.Index a -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
ac8febccce4ee0b281745d907ee9d407
  $wpoly_go1 ::
    GHC.Prim.Int# -> Data.Map.Base.Map World.Index a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
111e1a335ccb83ee2dcce2d1f030987d
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map World.Index a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
12be00b9980ce7a94d3ab107353bf425
  type Index = GHC.Types.Int
67114f18da6b0de4831a8eed1b3aaba4
  data Room
    = Room {roomID :: World.Index,
            name :: GHC.Base.String,
            attrs :: Data.Map.Base.Map GHC.Base.String GHC.Base.String,
            exits :: Data.Map.Base.Map GHC.Base.String World.Index}
571d49c072cac2ee9573bbb36813de4d
  data World
    = World {rooms :: Data.Map.Base.Map World.Index World.Room}
11c13a265345bb3ff86f1b26bf9a5a07
  addRoom :: World.Room -> World.World -> World.World
  {- Arity: 2, Strictness: <L,U><S,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Room) (w1 :: World.World) ->
                 case w1 of ww { World.World ww1 ->
                 case World.$waddRoom w ww1 of ww2 { Unit# ww3 ->
                 World.World ww3 } }) -}
c764a25125e2212ba77153cab64cd9d0
  attrs ::
    World.Room -> Data.Map.Base.Map GHC.Base.String GHC.Base.String
  RecSel Left World.Room
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Room) ->
                 case ds of wild { World.Room ds1 ds2 ds3 ds4 -> ds3 }) -}
62604e556786128fa07cde6996af1e05
  changeRoomAttribute ::
    World.World
    -> World.Index -> GHC.Base.String -> GHC.Base.String -> World.World
  {- Arity: 4, Strictness: <S(S),1*U(U)><S,U(U)><L,1*U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: World.World)
                   (w1 :: World.Index)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String) ->
                 case w of ww { World.World ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case World.$wchangeRoomAttribute
                        ww1
                        ww3
                        w2
                        w3 of ww4 { Unit# ww5 ->
                 World.World ww5 } } }) -}
08cac3574d3ca31c7b248bb21bf38269
  emptyWorld :: World.World
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (World.World
                   (Data.Map.Base.Tip @ World.Index @ World.Room)) -}
8d3366608799121c1e054c5d9aa75272
  exits ::
    World.Room -> Data.Map.Base.Map GHC.Base.String World.Index
  RecSel Left World.Room
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Room) ->
                 case ds of wild { World.Room ds1 ds2 ds3 ds4 -> ds4 }) -}
42b134ed1080118acfecc8da369eb73d
  getFreeKey :: Data.Map.Base.Map World.Index a -> World.Index
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (m :: Data.Map.Base.Map World.Index a) ->
                 World.iterateUntilNoKey
                   @ a
                   (Data.Map.Base.size @ World.Index @ a m)
                   m) -}
6ce064ffe0da97a64aa2de13f6fc9fce
  getNextRoomID :: World.World -> World.Index
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World m ->
                 World.getFreeKey @ World.Room m }) -}
0be1f79bf239777d5b6a7f33e93e4773
  getRoomAttribute ::
    World.World
    -> World.Index -> GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S,1*U(U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (w :: World.World)
                   (_roomID :: World.Index)
                   (key :: GHC.Base.String) ->
                 case w of wild { World.World ds ->
                 case World.$slookup3 @ World.Room _roomID ds of wild1 {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just x
                   -> case x of wild2 { World.Room ds1 ds2 ds3 ds4 ->
                      World.$slookup1 @ [GHC.Types.Char] key ds3 } } }) -}
2b5c6e0307c605506b90f546b7f59265
  getRoomByID ::
    World.Index -> World.World -> GHC.Base.Maybe World.Room
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (i :: World.Index) (w :: World.World) ->
                 case w of wild { World.World ds ->
                 World.$slookup3 @ World.Room i ds }) -}
23aeb10162b7c2e447f2de45daba8f5f
  iterateUntilNoKey ::
    World.Index -> Data.Map.Base.Map World.Index a -> World.Index
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U(U)><S,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: World.Index)
                   (w1 :: Data.Map.Base.Map World.Index a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case World.$witerateUntilNoKey @ a ww1 w1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
453d686bd35b98d3423c9ac9349fc38b
  name :: World.Room -> GHC.Base.String
  RecSel Left World.Room
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Room) ->
                 case ds of wild { World.Room ds1 ds2 ds3 ds4 -> ds2 }) -}
4a7b3d666b1763a597429a2c1e87c8f3
  roomID :: World.Room -> World.Index
  RecSel Left World.Room
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Room) ->
                 case ds of wild { World.Room ds1 ds2 ds3 ds4 -> ds1 }) -}
bc1f1d0abe082f6ce9e8b0954aae9ccc
  rooms :: World.World -> Data.Map.Base.Map World.Index World.Room
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 -> ds1 }) -}
instance [safe] GHC.Show.Show [World.Room] = World.$fShowRoom
instance [safe] GHC.Show.Show [World.World] = World.$fShowWorld
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

